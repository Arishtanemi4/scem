# return the truth value which says whether or not num is prime
return(t_val)
}
is_prime(13)
is_prime(12)
# if i divides num then num is not prime
t_val = FALSE
# This example function takes as input a positive integer and outputs Boolean
is_prime = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initialise truth value output with TRUE
t_val = TRUE
if(num < 2){
# Output FALSE if input is either 0 or 1
t_val =FALSE
}
else if (num > 2){
# Check possible divisors i no greater than sqrt(num)
for(i in 2:sqrt(num)){
print(sqrt(num))
print(i)
if(num %% i == 0){
# if i divides num then num is not prime
t_val = FALSE
break
}
}
}
# return the truth value which says whether or not num is prime
return(t_val)
}
is_prime(12)
# This example function takes as input a positive integer and outputs Boolean
is_prime = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initialise truth value output with TRUE
t_val = TRUE
if(num < 2){
# Output FALSE if input is either 0 or 1
t_val =FALSE
}
else if (num > 2){
# Check possible divisors i no greater than sqrt(num)
for(i in 2:sqrt(num)){
print(sqrt(num))
print(i)
if(num %% i == 0){
# if i divides num then num is not prime
t_val = FALSE
break
}
}
}
# return the truth value which says whether or not num is prime
return(t_val)
}
is_prime(100)
# This example function takes as input a positive integer and outputs Boolean
is_prime = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initialise truth value output with TRUE
t_val = TRUE
if(num < 2){
# Output FALSE if input is either 0 or 1
t_val =FALSE
}
else if (num > 2){
# Check possible divisors i no greater than sqrt(num)
for(i in 2:sqrt(num)){
print(sqrt(num))
print(i)
if(num %% i == 0){
# if i divides num then num is not prime
t_val = FALSE
break
}
}
}
# return the truth value which says whether or not num is prime
return(t_val)
}
is_prime(4)
# This example function takes as input a positive integer and outputs Boolean
is_prime = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initialise truth value output with TRUE
t_val = TRUE
if(num < 2){
# Output FALSE if input is either 0 or 1
t_val =FALSE
}
else if (num > 2){
# Check possible divisors i no greater than sqrt(num)
for(i in 2:sqrt(num)){
print(sqrt(num))
print(i)
if(num %% i == 0){
# if i divides num then num is not prime
t_val = FALSE
break
}
}
}
# return the truth value which says whether or not num is prime
return(t_val)
}
is_prime(1)
# This example function takes as input a positive integer and outputs Boolean
is_prime = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initialise truth value output with TRUE
t_val = TRUE
if(num < 2){
# Output FALSE if input is either 0 or 1
t_val =FALSE
}
else if (num > 2){
# Check possible divisors i no greater than sqrt(num)
for(i in 2:sqrt(num)){
print(sqrt(num))
print(i)
if(num %% i == 0){
# if i divides num then num is not prime
t_val = FALSE
break
}
}
}
# return the truth value which says whether or not num is prime
return(t_val)
}
is_prime()
# This example function takes as input a positive integer and outputs Boolean
is_prime = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initialise truth value output with TRUE
t_val = TRUE
if(num < 2){
# Output FALSE if input is either 0 or 1
t_val =FALSE
}
else if (num > 2){
# Check possible divisors i no greater than sqrt(num)
for(i in 2:sqrt(num)){
print(sqrt(num))
print(i)
if(num %% i == 0){
# if i divides num then num is not prime
t_val = FALSE
break
}
}
}
# return the truth value which says whether or not num is prime
return(t_val)
}
is_prime(1000)
# Summation of numbers divisible by 2 or 7
sumFunc = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
for(i in 2:num){
print(i, num)
if(i %% 2 == 0 || i %% 7 = 0){
print('check')
}
}
}
# Summation of numbers divisible by 2 or 7
sumFunc = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
for(i in 2:num){
print(i, num)
if(i %% 2 == 0 || i %% 7 = 0){
print('check')
}
}
}
sumFunc(14)
# Summation of numbers divisible by 2 or 7
sumFunc = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
for(i in 2:num){
print(i, num)
if(i %% 2 == 0 || i %% 7 = 0){
print('check')
}
}
return 1
}
sumFunc(14)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
for(i in 2:num){
print(i, num)
if(i %% 2 == 0 || i %% 7 = 0){
print('check')
}
}
return (1)
}
sum_func(14)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
for(i in 2:num){
print(i, num)
if(i %% 2 == 0 || i %% 7 = 0){
print('check')
}
}
return (1)
}
sum_func(14)
q()
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
for(i in 2:num){
print(i, num)
if(i %% 2 == 0 || i %% 7 = 0){
print('check')
}
}
return (1)
}
sum_func(14)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
for(i in 2:num){
print(i, num)
if(i %% 2 == 0 || i %% 7 = 0){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return (sum_var)
}
sum_func(14)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 2:num){
print(i, num)
if((i %% 2 == 0) || (i %% 7 = 0)){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(14)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 2:num){
print(i, num)
if(i %% 2 == 0){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(14)
for (i in 1:10){
print(i)
}
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 0:num){
print(i, num)
if(i %% 2 == 0){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(14)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 0:num){
print('i: ', i)
if(i %% 2 == 0){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(14)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 0:num){
print('i:')
print(i)
if(i %% 2 == 0){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(14)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 0:num){
if(i %% 2 == 0 ){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(1000)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 0:num){
if((i %% 2 == 0) || (i %% 7 == 0)){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(1000)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 0:num){
if((i %% 2 == 0)){
sum_var = sum_var + i
}
else if((i %% 7 == 0)){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(1000)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 0:num){
# Check if number is eiter divisible by 2 or 7
if((i %% 2 == 0) || (i %% 7 == 0)){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(1000)
# Summation of numbers divisible by 2 or 7
sum_func = function(num){
# Stop if the input is not a non-negative integer
stopifnot(is.numeric(num), num %% 1 == 0, num >= 0)
# Initalizing Sum variable
sum_var = 0
# Looping to sum numbers divisible by 2 or 7
for(i in 2:num){
# Check if number is eiter divisible by 2 or 7
if((i %% 2 == 0) || (i %% 7 == 0)){
sum_var = sum_var + i
}
else{
sum_var = sum_var + 0
}
}
return(sum_var)
}
sum_func(1000)
x = seq(0, 20, 0.01)
head(x)
y = sin(x)
head(y
x = seq(0, 20, 0.01)
head(x)
y = sin(x)
head(y)
x = seq(0, 20, 0.01)
length(x)
y = sin(x)
length(y)
x = seq(0, 20, 0.01)
y = sin(x)
typeof(x)
typeof(y)
x = seq(0, 20, 0.01)
y = sin(x)
sin_df = data.frame(
x, y
)
head(sin_df)
x = seq(0, 20, 0.01)
y = sin(x)
sin_df = data.frame(
x, y
)
head(sin_df)
sin_df(x)
x = seq(0, 20, 0.01)
y = sin(x)
sin_df = data.frame(
x, y
)
head(sin_df)
sin_df[x]
x = seq(0, 20, 0.01)
y = sin(x)
sin_df = data.frame(
x, y
)
head(sin_df)
sin_df['x']
x = seq(0, 20, 0.01)
y = sin(x)
sin_df = data.frame(
x, y
)
head(sin_df)
plot(sin_df['x'], sin_df['y'])
x = seq(0, 20, 0.01)
y = sin(x)
sin_df = data.frame(
x, y
)
head(sin_df)
plot(sin_df$x, sin_df$y)
library(nycflights13)
library(nycflights13)
library(nycflights13)
install.packages(nycflights13)
